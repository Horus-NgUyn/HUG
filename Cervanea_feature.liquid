{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-image-carousel-{{ ai_gen_id }} {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 40px 20px;
  }

  .ai-image-carousel-title-{{ ai_gen_id }} {
    text-align: center;
    margin: 0 0 40px;
    font-size: {{ block.settings.title_size }}px;
    color: {{ block.settings.title_color }};
    font-weight: 600;
  }

  .ai-image-carousel-container-{{ ai_gen_id }} {
    position: relative;
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .ai-image-carousel-viewport-{{ ai_gen_id }} {
    flex: 1;
    overflow: hidden;
    width: 100%;
    position: relative;
  }

  .ai-image-carousel-track-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.3s ease;
    gap: {{ block.settings.image_gap }}px;
  }

  .ai-image-carousel-slide-{{ ai_gen_id }} {
    flex: 0 0 calc((100% - {{ block.settings.image_gap | times: 3 }}px) / 4);
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 0; /* Prevent flex items from overflowing */
  }

  .ai-image-carousel-image-wrapper-{{ ai_gen_id }} {
    width: {{ block.settings.image_size }}px;
    height: {{ block.settings.image_size }}px;
    border-radius: 50%;
    overflow: hidden;
    background-color: {{ block.settings.image_background_color }};
    margin-bottom: 12px;
    border: {{ block.settings.image_border_width }}px solid {{ block.settings.image_border_color }};
    flex-shrink: 0;
    position: relative;
  }

  .ai-image-carousel-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-image-carousel-placeholder-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: {{ block.settings.image_background_color }};
  }

  .ai-image-carousel-placeholder-{{ ai_gen_id }} svg {
    width: 60%;
    height: 60%;
    opacity: 0.4;
    color: rgba(255, 255, 255, 0.7);
  }

  .ai-image-carousel-description-{{ ai_gen_id }} {
    font-size: {{ block.settings.description_size }}px;
    color: {{ block.settings.description_color }};
    text-align: center;
    line-height: 1.4;
    max-width: 100%;
    word-wrap: break-word;
  }

  .ai-image-carousel-nav-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .ai-image-carousel-nav-button-{{ ai_gen_id }} {
    width: 50px;
    height: 50px;
    border: none;
    border-radius: 50%;
    background-color: {{ block.settings.nav_button_color }};
    color: {{ block.settings.nav_button_icon_color }};
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .ai-image-carousel-nav-button-{{ ai_gen_id }}:hover:not(:disabled) {
    background-color: {{ block.settings.nav_button_hover_color }};
    transform: scale(1.05);
  }

  .ai-image-carousel-nav-button-{{ ai_gen_id }}:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    transform: none;
  }

  .ai-image-carousel-nav-button-{{ ai_gen_id }} svg {
    width: 24px;
    height: 24px;
  }

  .ai-image-carousel-progress-{{ ai_gen_id }} {
    display: flex !important;
    justify-content: center;
    align-items: center;
    margin: 30px auto 20px auto !important;
    gap: 8px;
    width: 100% !important;
    max-width: 200px;
    visibility: visible !important;
    opacity: 1 !important;
    z-index: 1000 !important;
    position: relative !important;
    padding: 10px !important;
    background: rgba(0,0,0,0.03) !important;
    border-radius: 20px !important;
    min-height: 20px !important;
  }

  .ai-image-carousel-progress-segment-{{ ai_gen_id }} {
    height: 6px !important;
    flex: 1 !important;
    background-color: {{ block.settings.progress_inactive_color | default: '#e0e0e0' }} !important;
    border-radius: 3px !important;
    transition: all 0.3s ease !important;
    position: relative !important;
    cursor: pointer !important;
    min-width: 30px !important;
    max-width: 50px;
    border: none !important;
    box-shadow: none !important;
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  .ai-image-carousel-progress-segment-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.progress_active_color | default: '#000000' }};
    opacity: 0.7;
    transform: scaleY(1.2);
  }

  .ai-image-carousel-progress-segment-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.progress_active_color | default: '#000000' }} !important;
    height: 8px !important;
    transform: scaleY(1) !important;
    border-radius: 4px !important;
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  .ai-image-carousel-progress-segment-{{ ai_gen_id }}.active:hover {
    opacity: 1;
    transform: scaleY(1.1);
  }

  @media screen and (max-width: 990px) {
    .ai-image-carousel-slide-{{ ai_gen_id }} {
      flex: 0 0 calc((100% - {{ block.settings.image_gap | times: 2 }}px) / 3);
    }

    .ai-image-carousel-image-wrapper-{{ ai_gen_id }} {
      width: {{ block.settings.image_size | times: 0.8 }}px;
      height: {{ block.settings.image_size | times: 0.8 }}px;
    }
  }

  @media screen and (max-width: 749px) {
    .ai-image-carousel-container-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 20px;
    }

    .ai-image-carousel-nav-{{ ai_gen_id }} {
      flex-direction: row;
      justify-content: center;
    }

    .ai-image-carousel-slide-{{ ai_gen_id }} {
      flex: 0 0 calc((100% - {{ block.settings.image_gap }}px) / 2);
    }

    .ai-image-carousel-image-wrapper-{{ ai_gen_id }} {
      width: {{ block.settings.image_size | times: 0.7 }}px;
      height: {{ block.settings.image_size | times: 0.7 }}px;
    }

    .ai-image-carousel-progress-{{ ai_gen_id }} {
      margin: 25px auto 15px auto !important;
      max-width: 180px;
      gap: 6px;
    }

    .ai-image-carousel-progress-segment-{{ ai_gen_id }} {
      height: 5px !important;
      min-width: 25px;
    }

    .ai-image-carousel-progress-segment-{{ ai_gen_id }}.active {
      height: 7px !important;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-image-carousel-slide-{{ ai_gen_id }} {
      flex: 0 0 100%;
    }

    .ai-image-carousel-image-wrapper-{{ ai_gen_id }} {
      width: {{ block.settings.image_size | times: 0.6 }}px;
      height: {{ block.settings.image_size | times: 0.6 }}px;
    }

    .ai-image-carousel-progress-{{ ai_gen_id }} {
      margin: 20px auto 10px auto !important;
      max-width: 150px;
      gap: 5px;
    }

    .ai-image-carousel-progress-segment-{{ ai_gen_id }} {
      height: 4px !important;
      min-width: 20px;
    }

    .ai-image-carousel-progress-segment-{{ ai_gen_id }}.active {
      height: 6px !important;
    }
  }

  /* Force visibility - Backup CSS */
  [class*="ai-image-carousel-progress-"] {
    display: flex !important;
    visibility: visible !important;
    opacity: 1 !important;
  }
  
  [class*="ai-image-carousel-progress-segment-"] {
    background-color: #e0e0e0 !important;
    height: 6px !important;
    width: 30px !important;
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    border-radius: 3px !important;
    flex: 1 !important;
  }
  
  [class*="ai-image-carousel-progress-segment-"].active {
    background-color: #000000 !important;
    height: 8px !important;
  }

{% endstyle %}

<image-carousel-{{ ai_gen_id }}
  class="ai-image-carousel-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.title != blank %}
    <h2 class="ai-image-carousel-title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
  {% endif %}

  <div class="ai-image-carousel-container-{{ ai_gen_id }}">
    <div class="ai-image-carousel-viewport-{{ ai_gen_id }}">
      <div class="ai-image-carousel-track-{{ ai_gen_id }}" data-track>
        {% for i in (1..6) %}
          {% liquid
            assign image_key = 'image_' | append: i
            assign description_key = 'description_' | append: i
            assign image = block.settings[image_key]
            assign description = block.settings[description_key]
          %}
          <div class="ai-image-carousel-slide-{{ ai_gen_id }}">
            <div class="ai-image-carousel-image-wrapper-{{ ai_gen_id }}">
              {% if image %}
                <img
                  src="{{ image | image_url: width: 400}}"
                  alt="{{ image.alt | escape }}"
                  class="ai-image-carousel-image-{{ ai_gen_id }}"
                  loading="lazy"
                  width="400"
                  height="400"
                >
              {% else %}
                <div class="ai-image-carousel-placeholder-{{ ai_gen_id }}">
                  {{ 'image' | placeholder_svg_tag }}
                </div>
              {% endif %}
            </div>
            {% if description != blank %}
              <div class="ai-image-carousel-description-{{ ai_gen_id }}">
                {{ description }}
              </div>
            {% endif %}
          </div>
        {% endfor %}
      </div>
    </div>

    <div class="ai-image-carousel-nav-{{ ai_gen_id }}">
      <button
        class="ai-image-carousel-nav-button-{{ ai_gen_id }}"
        data-next
        aria-label="Next images"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
      <button
        class="ai-image-carousel-nav-button-{{ ai_gen_id }}"
        data-prev
        aria-label="Previous images"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>
    </div>
  </div>

  <div class="ai-image-carousel-progress-{{ ai_gen_id }}" role="progressbar" aria-label="Carousel progress">
    <div class="ai-image-carousel-progress-segment-{{ ai_gen_id }} active" data-segment="0" title="Images 1-4"></div>
    <div class="ai-image-carousel-progress-segment-{{ ai_gen_id }}" data-segment="1" title="Images 2-5"></div>
    <div class="ai-image-carousel-progress-segment-{{ ai_gen_id }}" data-segment="2" title="Images 3-6"></div>
  </div>
</image-carousel-{{ ai_gen_id }}>

<script>
  (function() {
    class ImageCarousel{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentIndex = 0;
        this.maxIndex = 2; // 3 segments: 0, 1, 2
        this.isTransitioning = false;
        this.totalImages = 6;
        this.imagesPerView = 4; // Show 4 images at a time
      }

      connectedCallback() {
        this.track = this.querySelector('[data-track]');
        this.prevButton = this.querySelector('[data-prev]');
        this.nextButton = this.querySelector('[data-next]');
        this.segments = this.querySelectorAll('[data-segment]');

        this.setupEventListeners();
        this.updateCarousel();

        // Ensure progress bar is visible after load
        setTimeout(() => {
          this.updateProgressBar();
          const progressBar = this.querySelector('.ai-image-carousel-progress-{{ ai_gen_id }}');
          console.log('Progress bar initialized, current segment:', this.currentIndex);
          console.log('Progress segments found:', this.segments.length);
          console.log('Progress bar element:', progressBar);
          
          if (progressBar) {
            progressBar.style.display = 'flex';
            progressBar.style.visibility = 'visible';
            progressBar.style.opacity = '1';
            console.log('Force applied visibility to progress bar');
          }
          
          this.segments.forEach((segment, index) => {
            segment.style.display = 'block';
            segment.style.visibility = 'visible';
            segment.style.opacity = '1';
            segment.style.backgroundColor = index === this.currentIndex ? '#000000' : '#e0e0e0';
            console.log(`Segment ${index} forced visible:`, segment);
          });
        }, 100);
      }

      setupEventListeners() {
        this.prevButton.addEventListener('click', () => this.goToPrevious());
        this.nextButton.addEventListener('click', () => this.goToNext());
        
        // Add progress bar click functionality
        this.segments.forEach((segment, index) => {
          segment.addEventListener('click', () => this.goToSegment(index));
        });
        
        // Add keyboard navigation
        this.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowLeft') this.goToPrevious();
          if (e.key === 'ArrowRight') this.goToNext();
        });

        // Add touch support for mobile
        this.setupTouchEvents();
      }

      setupTouchEvents() {
        let startX = 0;
        let endX = 0;

        this.track.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
        });

        this.track.addEventListener('touchend', (e) => {
          endX = e.changedTouches[0].clientX;
          const diff = startX - endX;
          
          if (Math.abs(diff) > 50) { // Minimum swipe distance
            if (diff > 0) {
              this.goToNext();
            } else {
              this.goToPrevious();
            }
          }
        });
      }

      goToPrevious() {
        if (this.currentIndex > 0 && !this.isTransitioning) {
          this.currentIndex--;
          this.updateCarousel();
        }
      }

      goToNext() {
        if (this.currentIndex < this.maxIndex && !this.isTransitioning) {
          this.currentIndex++;
          this.updateCarousel();
        }
      }

      goToSegment(segmentIndex) {
        if (segmentIndex >= 0 && segmentIndex <= this.maxIndex && segmentIndex !== this.currentIndex && !this.isTransitioning) {
          console.log('Navigating to segment:', segmentIndex);
          this.currentIndex = segmentIndex;
          this.updateCarousel();
        }
      }

      updateCarousel() {
        this.isTransitioning = true;
        
        const slideWidth = this.track.children[0].offsetWidth;
        const gap = {{ block.settings.image_gap }};
        // Move by one image position for each segment
        const translateX = -(this.currentIndex * (slideWidth + gap));
        this.track.style.transform = `translateX(${translateX}px)`;

        this.updateButtons();
        this.updateProgressBar();

        // Reset transition flag
        setTimeout(() => {
          this.isTransitioning = false;
        }, 300);
      }

      updateButtons() {
        this.prevButton.disabled = this.currentIndex === 0;
        this.nextButton.disabled = this.currentIndex === this.maxIndex;
      }

      updateProgressBar() {
        this.segments.forEach((segment, index) => {
          segment.classList.toggle('active', index === this.currentIndex);
        });
        console.log('Progress bar updated, active segment:', this.currentIndex);
      }
    }

    customElements.define('image-carousel-{{ ai_gen_id }}', ImageCarousel{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Image carousel",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Tiêu đề"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Tiêu đề",
      "default": "Thư viện ảnh"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Kích thước tiêu đề",
      "default": 32
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Màu tiêu đề",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Hình ảnh"
    },
    {
      "type": "range",
      "id": "image_size",
      "min": 80,
      "max": 200,
      "step": 10,
      "unit": "px",
      "label": "Kích thước hình ảnh",
      "default": 120
    },
    {
      "type": "color",
      "id": "image_background_color",
      "label": "Màu nền hình ảnh",
      "default": "#9B6A5B",
      "info": "Màu nền hiển thị phía sau hình ảnh và trong placeholder"
    },
    {
      "type": "range",
      "id": "image_border_width",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Độ dày viền ảnh",
      "default": 2
    },
    {
      "type": "color",
      "id": "image_border_color",
      "label": "Màu viền ảnh",
      "default": "#e0e0e0"
    },
    {
      "type": "range",
      "id": "image_gap",
      "min": 0,
      "max": 80,
      "step":2,
      "unit": "px",
      "label": "Khoảng cách giữa các ảnh",
      "default": 8
    },
    {
      "type": "range",
      "id": "description_size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Kích thước mô tả",
      "default": 14
    },
    {
      "type": "color",
      "id": "description_color",
      "label": "Màu mô tả",
      "default": "#666666"
    },
    {
      "type": "header",
      "content": "Điều hướng"
    },
    {
      "type": "color",
      "id": "nav_button_color",
      "label": "Màu nền nút",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "nav_button_hover_color",
      "label": "Màu nền nút khi hover",
      "default": "#f0f0f0"
    },
    {
      "type": "color",
      "id": "nav_button_icon_color",
      "label": "Màu biểu tượng nút",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Thanh tiến trình"
    },
    {
      "type": "range",
      "id": "progress_height",
      "min": 4,
      "max": 15,
      "step": 1,
      "unit": "px",
      "label": "Chiều cao thanh tiến trình",
      "default": 8,
      "info": "Chiều cao đã tăng để dễ nhìn hơn"
    },
    {
      "type": "range",
      "id": "progress_border_radius",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Bo góc thanh tiến trình",
      "default": 4
    },
    {
      "type": "color",
      "id": "progress_active_color",
      "label": "Màu phân đoạn đang hoạt động",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "progress_inactive_color",
      "label": "Màu phân đoạn không hoạt động",
      "default": "#e0e0e0"
    },
    {
      "type": "header",
      "content": "Hình ảnh 1"
    },
    {
      "type": "image_picker",
      "id": "image_1",
      "label": "Hình ảnh"
    },
    {
      "type": "text",
      "id": "description_1",
      "label": "Mô tả"
    },
    {
      "type": "header",
      "content": "Hình ảnh 2"
    },
    {
      "type": "image_picker",
      "id": "image_2",
      "label": "Hình ảnh"
    },
    {
      "type": "text",
      "id": "description_2",
      "label": "Mô tả"
    },
    {
      "type": "header",
      "content": "Hình ảnh 3"
    },
    {
      "type": "image_picker",
      "id": "image_3",
      "label": "Hình ảnh"
    },
    {
      "type": "text",
      "id": "description_3",
      "label": "Mô tả"
    },
    {
      "type": "header",
      "content": "Hình ảnh 4"
    },
    {
      "type": "image_picker",
      "id": "image_4",
      "label": "Hình ảnh"
    },
    {
      "type": "text",
      "id": "description_4",
      "label": "Mô tả"
    },
    {
      "type": "header",
      "content": "Hình ảnh 5"
    },
    {
      "type": "image_picker",
      "id": "image_5",
      "label": "Hình ảnh"
    },
    {
      "type": "text",
      "id": "description_5",
      "label": "Mô tả"
    },
    {
      "type": "header",
      "content": "Hình ảnh 6"
    },
    {
      "type": "image_picker",
      "id": "image_6",
      "label": "Hình ảnh"
    },
    {
      "type": "text",
      "id": "description_6",
      "label": "Mô tả"
    }
  ],
  "presets": [
    {
      "name": "Image carousel"
    }
  ]
}
{% endschema %}
